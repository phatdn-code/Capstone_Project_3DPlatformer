using UnityEngine;

namespace PLAYERTWO.PlatformerProject
{
    /// <summary>
    /// Component ƒë·ªÉ x·ª≠ l√Ω animation events cho Soldier Robot
    /// </summary>
    [AddComponentMenu("PLAYER TWO/Platformer Project/Boss/Soldier Robot Animation Events")]
    public class SoldierRobotAnimationEvents : MonoBehaviour
    {
        [Header("Animation Events")]
        [Tooltip("Soldier Robot component")]
        [SerializeField] private SoldierRobot soldierRobot;

        [Tooltip("Animator c·ªßa boss")]
        private Animator bossAnimator;

        private void Start()
        {
            Debug.Log("üé¨ SoldierRobotAnimationEvents Start()");
            Debug.Log($"üé¨ GameObject: {gameObject.name}");
            Debug.Log($"üé¨ Parent: {(transform.parent != null ? transform.parent.name : "null")}");

            // T·ª± ƒë·ªông t√¨m SoldierRobot n·∫øu ch∆∞a ƒë∆∞·ª£c g√°n
            if (soldierRobot == null)
            {
                soldierRobot = GetComponentInParent<SoldierRobot>();
                Debug.Log($"üîç T√¨m SoldierRobot trong parent hierarchy: {(soldierRobot != null ? "‚úÖ T√¨m th·∫•y" : "‚ùå Kh√¥ng t√¨m th·∫•y")}");
            }

            // T·ª± ƒë·ªông t√¨m Animator n·∫øu ch∆∞a ƒë∆∞·ª£c g√°n
            if (bossAnimator == null)
            {
                // T√¨m Animator trong Skin tr∆∞·ªõc
                if (soldierRobot != null && soldierRobot.SkinAnimator != null)
                {
                    bossAnimator = soldierRobot.SkinAnimator;
                    Debug.Log($"üîç T√¨m Skin Animator: {(bossAnimator != null ? "‚úÖ T√¨m th·∫•y" : "‚ùå Kh√¥ng t√¨m th·∫•y")}");
                }
                else
                {
                    // T√¨m Animator trong children ho·∫∑c parent
                    bossAnimator = GetComponent<Animator>();

                    if (bossAnimator == null)
                        bossAnimator = GetComponent<Animator>();

                    Debug.Log($"üîç T√¨m Animator trong hierarchy: {(bossAnimator != null ? "‚úÖ T√¨m th·∫•y" : "‚ùå Kh√¥ng t√¨m th·∫•y")}");
                }
            }

            Debug.Log($"üé¨ Setup ho√†n t·∫•t - SoldierRobot: {(soldierRobot != null ? "‚úÖ" : "‚ùå")}, Animator: {(bossAnimator != null ? "‚úÖ" : "‚ùå")}");
        }

        /// <summary>
        /// Animation event: B·∫Øn bom t·ª´ tay ph·∫£i
        /// ƒê∆∞·ª£c g·ªçi t·ª´ animation "Right Hand Shoot"
        /// </summary>
        public void OnRightHandShoot()
        {
            Debug.Log("üéØ OnRightHandShoot() ƒë∆∞·ª£c g·ªçi!");

            // Fallback: T√¨m SoldierRobot n·∫øu null
            if (soldierRobot == null)
            {
                soldierRobot = GetComponentInParent<SoldierRobot>();
                Debug.Log($"üîç Fallback t√¨m SoldierRobot: {(soldierRobot != null ? "‚úÖ T√¨m th·∫•y" : "‚ùå Kh√¥ng t√¨m th·∫•y")}");
            }

            if (soldierRobot != null)
            {
                soldierRobot.ShootBombFromAnimation(true); // true = s·ª≠ d·ª•ng tay ph·∫£i
                Debug.Log("‚úÖ Animation Event: B·∫Øn bom t·ª´ tay ph·∫£i!");
            }
            else
            {
                Debug.LogError("‚ùå SoldierRobot is null! Kh√¥ng th·ªÉ b·∫Øn bom!");
            }
        }

        /// <summary>
        /// Animation event: B·∫Øn bom t·ª´ tay tr√°i
        /// ƒê∆∞·ª£c g·ªçi t·ª´ animation "Left Hand Shoot"
        /// </summary>
        public void OnLeftHandShoot()
        {
            Debug.Log("üéØ OnLeftHandShoot() ƒë∆∞·ª£c g·ªçi!");

            // Fallback: T√¨m SoldierRobot n·∫øu null
            if (soldierRobot == null)
            {
                soldierRobot = GetComponentInParent<SoldierRobot>();
                Debug.Log($"üîç Fallback t√¨m SoldierRobot: {(soldierRobot != null ? "‚úÖ T√¨m th·∫•y" : "‚ùå Kh√¥ng t√¨m th·∫•y")}");
            }

            if (soldierRobot != null)
            {
                soldierRobot.ShootBombFromAnimation(false); // false = s·ª≠ d·ª•ng tay tr√°i
                Debug.Log("‚úÖ Animation Event: B·∫Øn bom t·ª´ tay tr√°i!");
            }
            else
            {
                Debug.LogError("‚ùå SoldierRobot is null! Kh√¥ng th·ªÉ b·∫Øn bom!");
            }
        }

        /// <summary>
        /// Animation event: B·∫Øt ƒë·∫ßu animation b·∫Øn
        /// </summary>
        public void OnShootStart()
        {
            Debug.Log("Animation Event: B·∫Øt ƒë·∫ßu animation b·∫Øn!");

            // C√≥ th·ªÉ th√™m hi·ªáu ·ª©ng √¢m thanh, particle, etc.
            PlayShootSound();
        }

        /// <summary>
        /// Animation event: K·∫øt th√∫c animation b·∫Øn
        /// </summary>
        public void OnShootEnd()
        {
            Debug.Log("Animation Event: K·∫øt th√∫c animation b·∫Øn!");
        }

        /// <summary>
        /// Animation event: B·∫Øt ƒë·∫ßu animation c·∫ßu l·ª≠a
        /// </summary>
        public void OnFireballStart()
        {
            Debug.Log("Animation Event: B·∫Øt ƒë·∫ßu animation c·∫ßu l·ª≠a!");

            // C√≥ th·ªÉ th√™m hi·ªáu ·ª©ng chu·∫©n b·ªã c·∫ßu l·ª≠a
            PlayFireballChargeSound();
        }

        /// <summary>
        /// Animation event: B·∫Øn c·∫ßu l·ª≠a
        /// </summary>
        public void OnFireballShoot()
        {
            Debug.Log("üéØ OnFireballShoot() ƒë∆∞·ª£c g·ªçi!");

            // Fallback: T√¨m SoldierRobot n·∫øu null
            if (soldierRobot == null)
            {
                soldierRobot = GetComponentInParent<SoldierRobot>();
                Debug.Log($"üîç Fallback t√¨m SoldierRobot: {(soldierRobot != null ? "‚úÖ T√¨m th·∫•y" : "‚ùå Kh√¥ng t√¨m th·∫•y")}");
            }

            if (soldierRobot != null)
            {
                // G·ªçi method t·∫°o c·∫ßu l·ª≠a t·ª´ SoldierRobot
                soldierRobot.CreateFireballFromAnimation();
                Debug.Log("‚úÖ Animation Event: B·∫Øn c·∫ßu l·ª≠a!");
            }
            else
            {
                Debug.LogError("‚ùå SoldierRobot is null! Kh√¥ng th·ªÉ b·∫Øn c·∫ßu l·ª≠a!");
            }
        }

        /// <summary>
        /// Animation event: K·∫øt th√∫c animation c·∫ßu l·ª≠a
        /// </summary>
        public void OnFireballEnd()
        {
            Debug.Log("Animation Event: K·∫øt th√∫c animation c·∫ßu l·ª≠a!");
        }

        /// <summary>
        /// Animation event: Boss b·ªã damage
        /// </summary>
        public void OnDamageTaken()
        {
            Debug.Log("Animation Event: Boss nh·∫≠n s√°t th∆∞∆°ng!");

            // C√≥ th·ªÉ th√™m hi·ªáu ·ª©ng damage
            PlayDamageSound();
        }

        /// <summary>
        /// Animation event: Boss chuy·ªÉn giai ƒëo·∫°n
        /// </summary>
        public void OnPhaseTransition()
        {
            Debug.Log("Animation Event: Boss chuy·ªÉn giai ƒëo·∫°n!");

            // C√≥ th·ªÉ th√™m hi·ªáu ·ª©ng chuy·ªÉn giai ƒëo·∫°n
            PlayPhaseTransitionEffect();
        }

        /// <summary>
        /// Animation event: Boss ch·∫øt
        /// </summary>
        public void OnBossDeath()
        {
            Debug.Log("Animation Event: Boss ch·∫øt!");

            // C√≥ th·ªÉ th√™m hi·ªáu ·ª©ng ch·∫øt
            PlayDeathEffect();
        }

        // Helper methods cho hi·ªáu ·ª©ng
        private void PlayShootSound()
        {
            // TODO: Th√™m √¢m thanh b·∫Øn bom
            // AudioSource.PlayClipAtPoint(shootSound, transform.position);
        }

        private void PlayFireballChargeSound()
        {
            // TODO: Th√™m √¢m thanh chu·∫©n b·ªã c·∫ßu l·ª≠a
            // AudioSource.PlayClipAtPoint(fireballChargeSound, transform.position);
        }

        private void PlayDamageSound()
        {
            // TODO: Th√™m √¢m thanh nh·∫≠n s√°t th∆∞∆°ng
            // AudioSource.PlayClipAtPoint(damageSound, transform.position);
        }

        private void PlayPhaseTransitionEffect()
        {
            // TODO: Th√™m hi·ªáu ·ª©ng chuy·ªÉn giai ƒëo·∫°n
            // Instantiate(phaseTransitionEffect, transform.position, Quaternion.identity);
        }

        private void PlayDeathEffect()
        {
            // TODO: Th√™m hi·ªáu ·ª©ng ch·∫øt
            // Instantiate(deathEffect, transform.position, Quaternion.identity);
        }

        /// <summary>
        /// Method ƒë·ªÉ trigger animation t·ª´ code
        /// </summary>
        /// <param name="animationName">T√™n animation</param>
        public void TriggerAnimation(string animationName)
        {
            if (bossAnimator != null)
            {
                bossAnimator.SetTrigger(animationName);
                Debug.Log($"üé¨ Trigger animation: {animationName}");
            }
            else
            {
                Debug.LogError($"‚ùå Kh√¥ng th·ªÉ trigger animation {animationName} - Animator null!");
            }
        }

        /// <summary>
        /// Debug animation state
        /// </summary>
        public void DebugAnimationState()
        {
            if (bossAnimator != null)
            {
                Debug.Log($"üé¨ Animator State: {bossAnimator.GetCurrentAnimatorStateInfo(0).shortNameHash}");
                Debug.Log($"üé¨ Animator Speed: {bossAnimator.speed}");
                Debug.Log($"üé¨ Animator Enabled: {bossAnimator.enabled}");
            }
            else
            {
                Debug.LogError("‚ùå Animator null - kh√¥ng th·ªÉ debug!");
            }
        }

        /// <summary>
        /// Method ƒë·ªÉ set animation parameter
        /// </summary>
        /// <param name="parameterName">T√™n parameter</param>
        /// <param name="value">Gi√° tr·ªã</param>
        public void SetAnimationParameter(string parameterName, float value)
        {
            if (bossAnimator != null)
                bossAnimator.SetFloat(parameterName, value);
        }

        /// <summary>
        /// Method ƒë·ªÉ set animation parameter (bool)
        /// </summary>
        /// <param name="parameterName">T√™n parameter</param>
        /// <param name="value">Gi√° tr·ªã</param>
        public void SetAnimationParameter(string parameterName, bool value)
        {
            if (bossAnimator != null)
                bossAnimator.SetBool(parameterName, value);
        }

        // Public methods to set values
        public void SetSoldierRobot(SoldierRobot newSoldierRobot) => soldierRobot = newSoldierRobot;
        public void SetBossAnimator(Animator newAnimator) => bossAnimator = newAnimator;
    }
}


